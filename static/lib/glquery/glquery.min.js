/*
 * glQuery - A fluent WebGL engine (https://github.com/glQuery)
 * glQuery is free, public domain software (http://creativecommons.org/publicdomain/zero/1.0/)
 * Originally created by Rehno Lindeque of http://www.mischievousmeerkat.com
 */
var glQuery=function(){"use strict";var gl=function(selector){return gl.fn.init(selector)},debugLevel=0,scenes={},commands=[],tagCommands={},dirtyTags=[],shaders={},shaderLocations={},shaderProgramCounter=0,contexts=[],eventCallbacks={contextlost:[],contextrestored:[],contextcreationerror:[]},logDebug=!(debugLevel>0)?function(){}:debugLevel===1?function(msg){console.debug("glQuery:",msg)}:function(){console.debug.apply(console,["glQuery:"].concat(Array.prototype.slice.call(arguments)))},logInfo=function(msg){console.log("glQuery:",msg)},logWarning=function(msg){console.warn("glQuery:",msg)},logError=function(msg){console.error("glQuery:",msg)},logApiError=function(func,msg){console.error("glQuery:","In call to '"+func+"', "+msg)},assert=function(condition,msg){if(!condition)logError(msg);return condition},assertType=function(param,typeStr,parentFunction,paramStr){if(paramStr!=null&&parentFunction!=null)return assert(typeof param===typeStr,"In call to '"+parentFunction+"', expected type '"+typeStr+"' for '"+paramStr+"'. Instead, got type '"+typeof param+"'.");else if(parentFunction!=null)return assert(typeof param===typeStr,"In call to '"+parentFunction+"', expected type '"+typeStr+"'. Instead, got type '"+typeof param+"'.");else if(paramStr!=null)return assert(typeof param===typeStr,"Expected type '"+typeStr+"' for '"+paramStr+"'. Instead, got type '"+typeof param+"'.");else return assert(typeof param===typeStr,"Expected type '"+typeStr+"'. Instead, got type '"+typeof param+"'.")},assertNumberOfArguments=function(args,minNumber,parentFunction){if(parentFunction!=null)return assert(args.length>=minNumber,"In call to '"+parentFunction+"', expected at least "+minNumber+" arguments. Instead, got "+args.length+".");else return assert(args.length>=minNumber,"Expected at least "+minNumber+" arguments. Instead, got "+args.length+".")},assertInternal=assert,lastId=0,generateId=function(){var r="__glq__"+lastId;++lastId;return r},normalizeNodes=function(nodes){if(Array.isArray(nodes)){var resultNodes=[];resultNodes.hashes={};resultNodes.lastUpdate=0;for(var i=0;i<nodes.length;++i){var resultNode=normalizeNodes(nodes[i]);if(Array.isArray(nodes)){var obj={};obj[generateId()]=resultNodes;resultNodes.push(obj)}if(resultNode!=null)resultNodes.push(resultNode);else logApiError("scene","could not normalize the node with type '"+typeof nodes[i]+"'.")}return resultNodes}switch(typeof nodes){case"string":var tags=nodes.split(" ");for(var i=0;i<tags.length;++i)if(typeof tagCommands[tags[i]]==="undefined")tagCommands[tags[i]]=new Array(commandEval.length);return nodes;case"number":var str=String(nodes);if(typeof tagCommands[str]==="undefined")tagCommands[str]=new Array(commandEval.length);return str;case"object":var result={};for(var key in nodes){if(key==="prototype"){logError("The given nodes contain a 'prototype' object. ");continue}normalizeNodes(key);var node=normalizeNodes(nodes[key]);if(Array.isArray(node))result[key]=node;else{var n=node!=null?[node]:[];n.hashes={};n.lastUpdate=0;result[key]=n}}return result}};window.requestAnimationFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(callback,element){window.setTimeout(callback,1e3/60)}}();window.cancelRequestAnimationFrame=function(){return window.cancelRequestAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout}();var webglTypeSize=[1,1,2,2,4,4,4];gl.DEPTH_BUFFER_BIT=256;gl.STENCIL_BUFFER_BIT=1024;gl.COLOR_BUFFER_BIT=16384;gl.POINTS=0;gl.LINES=1;gl.LINE_LOOP=2;gl.LINE_STRIP=3;gl.TRIANGLES=4;gl.TRIANGLE_STRIP=5;gl.TRIANGLE_FAN=6;gl.ZERO=0;gl.ONE=1;gl.SRC_COLOR=768;gl.ONE_MINUS_SRC_COLOR=769;gl.SRC_ALPHA=770;gl.ONE_MINUS_SRC_ALPHA=771;gl.DST_ALPHA=772;gl.ONE_MINUS_DST_ALPHA=773;gl.DST_COLOR=774;gl.ONE_MINUS_DST_COLOR=775;gl.SRC_ALPHA_SATURATE=776;gl.FUNC_ADD=32774;gl.BLEND_EQUATION=32777;gl.BLEND_EQUATION_RGB=32777;gl.BLEND_EQUATION_ALPHA=34877;gl.FUNC_SUBTRACT=32778;gl.FUNC_REVERSE_SUBTRACT=32779;gl.BLEND_DST_RGB=32968;gl.BLEND_SRC_RGB=32969;gl.BLEND_DST_ALPHA=32970;gl.BLEND_SRC_ALPHA=32971;gl.CONSTANT_COLOR=32769;gl.ONE_MINUS_CONSTANT_COLOR=32770;gl.CONSTANT_ALPHA=32771;gl.ONE_MINUS_CONSTANT_ALPHA=32772;gl.BLEND_COLOR=32773;gl.ARRAY_BUFFER=34962;gl.ELEMENT_ARRAY_BUFFER=34963;gl.ARRAY_BUFFER_BINDING=34964;gl.ELEMENT_ARRAY_BUFFER_BINDING=34965;gl.STREAM_DRAW=35040;gl.STATIC_DRAW=35044;gl.DYNAMIC_DRAW=35048;gl.BUFFER_SIZE=34660;gl.BUFFER_USAGE=34661;gl.CURRENT_VERTEX_ATTRIB=34342;gl.FRONT=1028;gl.BACK=1029;gl.FRONT_AND_BACK=1032;gl.CULL_FACE=2884;gl.BLEND=3042;gl.DITHER=3024;gl.STENCIL_TEST=2960;gl.DEPTH_TEST=2929;gl.SCISSOR_TEST=3089;gl.POLYGON_OFFSET_FILL=32823;gl.SAMPLE_ALPHA_TO_COVERAGE=32926;gl.SAMPLE_COVERAGE=32928;gl.NO_ERROR=0;gl.INVALID_ENUM=1280;gl.INVALID_VALUE=1281;gl.INVALID_OPERATION=1282;gl.OUT_OF_MEMORY=1285;gl.CW=2304;gl.CCW=2305;gl.LINE_WIDTH=2849;gl.ALIASED_POINT_SIZE_RANGE=33901;gl.ALIASED_LINE_WIDTH_RANGE=33902;gl.CULL_FACE_MODE=2885;gl.FRONT_FACE=2886;gl.DEPTH_RANGE=2928;gl.DEPTH_WRITEMASK=2930;gl.DEPTH_CLEAR_VALUE=2931;gl.DEPTH_FUNC=2932;gl.STENCIL_CLEAR_VALUE=2961;gl.STENCIL_FUNC=2962;gl.STENCIL_FAIL=2964;gl.STENCIL_PASS_DEPTH_FAIL=2965;gl.STENCIL_PASS_DEPTH_PASS=2966;gl.STENCIL_REF=2967;gl.STENCIL_VALUE_MASK=2963;gl.STENCIL_WRITEMASK=2968;gl.STENCIL_BACK_FUNC=34816;gl.STENCIL_BACK_FAIL=34817;gl.STENCIL_BACK_PASS_DEPTH_FAIL=34818;gl.STENCIL_BACK_PASS_DEPTH_PASS=34819;gl.STENCIL_BACK_REF=36003;gl.STENCIL_BACK_VALUE_MASK=36004;gl.STENCIL_BACK_WRITEMASK=36005;gl.VIEWPORT=2978;gl.SCISSOR_BOX=3088;gl.COLOR_CLEAR_VALUE=3106;gl.COLOR_WRITEMASK=3107;gl.UNPACK_ALIGNMENT=3317;gl.PACK_ALIGNMENT=3333;gl.MAX_TEXTURE_SIZE=3379;gl.MAX_VIEWPORT_DIMS=3386;gl.SUBPIXEL_BITS=3408;gl.RED_BITS=3410;gl.GREEN_BITS=3411;gl.BLUE_BITS=3412;gl.ALPHA_BITS=3413;gl.DEPTH_BITS=3414;gl.STENCIL_BITS=3415;gl.POLYGON_OFFSET_UNITS=10752;gl.POLYGON_OFFSET_FACTOR=32824;gl.TEXTURE_BINDING_2D=32873;gl.SAMPLE_BUFFERS=32936;gl.SAMPLES=32937;gl.SAMPLE_COVERAGE_VALUE=32938;gl.SAMPLE_COVERAGE_INVERT=32939;gl.NUM_COMPRESSED_TEXTURE_FORMATS=34466;gl.COMPRESSED_TEXTURE_FORMATS=34467;gl.DONT_CARE=4352;gl.FASTEST=4353;gl.NICEST=4354;gl.GENERATE_MIPMAP_HINT=33170;gl.BYTE=5120;gl.UNSIGNED_BYTE=5121;gl.SHORT=5122;gl.UNSIGNED_SHORT=5123;gl.INT=5124;gl.UNSIGNED_INT=5125;gl.FLOAT=5126;gl.DEPTH_COMPONENT=6402;gl.ALPHA=6406;gl.RGB=6407;gl.RGBA=6408;gl.LUMINANCE=6409;gl.LUMINANCE_ALPHA=6410;gl.UNSIGNED_SHORT_4_4_4_4=32819;gl.UNSIGNED_SHORT_5_5_5_1=32820;gl.UNSIGNED_SHORT_5_6_5=33635;gl.FRAGMENT_SHADER=35632;gl.VERTEX_SHADER=35633;gl.MAX_VERTEX_ATTRIBS=34921;gl.MAX_VERTEX_UNIFORM_VECTORS=36347;gl.MAX_VARYING_VECTORS=36348;gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS=35661;gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS=35660;gl.MAX_TEXTURE_IMAGE_UNITS=34930;gl.MAX_FRAGMENT_UNIFORM_VECTORS=36349;gl.SHADER_TYPE=35663;gl.DELETE_STATUS=35712;gl.LINK_STATUS=35714;gl.VALIDATE_STATUS=35715;gl.ATTACHED_SHADERS=35717;gl.ACTIVE_UNIFORMS=35718;gl.ACTIVE_ATTRIBUTES=35721;gl.SHADING_LANGUAGE_VERSION=35724;gl.CURRENT_PROGRAM=35725;gl.NEVER=512;gl.LESS=513;gl.EQUAL=514;gl.LEQUAL=515;gl.GREATER=516;gl.NOTEQUAL=517;gl.GEQUAL=518;gl.ALWAYS=519;gl.KEEP=7680;gl.REPLACE=7681;gl.INCR=7682;gl.DECR=7683;gl.INVERT=5386;gl.INCR_WRAP=34055;gl.DECR_WRAP=34056;gl.VENDOR=7936;gl.RENDERER=7937;gl.VERSION=7938;gl.NEAREST=9728;gl.LINEAR=9729;gl.NEAREST_MIPMAP_NEAREST=9984;gl.LINEAR_MIPMAP_NEAREST=9985;gl.NEAREST_MIPMAP_LINEAR=9986;gl.LINEAR_MIPMAP_LINEAR=9987;gl.TEXTURE_MAG_FILTER=10240;gl.TEXTURE_MIN_FILTER=10241;gl.TEXTURE_WRAP_S=10242;gl.TEXTURE_WRAP_T=10243;gl.TEXTURE_2D=3553;gl.TEXTURE=5890;gl.TEXTURE_CUBE_MAP=34067;gl.TEXTURE_BINDING_CUBE_MAP=34068;gl.TEXTURE_CUBE_MAP_POSITIVE_X=34069;gl.TEXTURE_CUBE_MAP_NEGATIVE_X=34070;gl.TEXTURE_CUBE_MAP_POSITIVE_Y=34071;gl.TEXTURE_CUBE_MAP_NEGATIVE_Y=34072;gl.TEXTURE_CUBE_MAP_POSITIVE_Z=34073;gl.TEXTURE_CUBE_MAP_NEGATIVE_Z=34074;gl.MAX_CUBE_MAP_TEXTURE_SIZE=34076;gl.TEXTURE0=33984;gl.TEXTURE1=33985;gl.TEXTURE2=33986;gl.TEXTURE3=33987;gl.TEXTURE4=33988;gl.TEXTURE5=33989;gl.TEXTURE6=33990;gl.TEXTURE7=33991;gl.TEXTURE8=33992;gl.TEXTURE9=33993;gl.TEXTURE10=33994;gl.TEXTURE11=33995;gl.TEXTURE12=33996;gl.TEXTURE13=33997;gl.TEXTURE14=33998;gl.TEXTURE15=33999;gl.TEXTURE16=34e3;gl.TEXTURE17=34001;gl.TEXTURE18=34002;gl.TEXTURE19=34003;gl.TEXTURE20=34004;gl.TEXTURE21=34005;gl.TEXTURE22=34006;gl.TEXTURE23=34007;gl.TEXTURE24=34008;gl.TEXTURE25=34009;gl.TEXTURE26=34010;gl.TEXTURE27=34011;gl.TEXTURE28=34012;gl.TEXTURE29=34013;gl.TEXTURE30=34014;gl.TEXTURE31=34015;gl.ACTIVE_TEXTURE=34016;gl.REPEAT=10497;gl.CLAMP_TO_EDGE=33071;gl.MIRRORED_REPEAT=33648;gl.FLOAT_VEC2=35664;gl.FLOAT_VEC3=35665;gl.FLOAT_VEC4=35666;gl.INT_VEC2=35667;gl.INT_VEC3=35668;gl.INT_VEC4=35669;gl.BOOL=35670;gl.BOOL_VEC2=35671;gl.BOOL_VEC3=35672;gl.BOOL_VEC4=35673;gl.FLOAT_MAT2=35674;gl.FLOAT_MAT3=35675;gl.FLOAT_MAT4=35676;gl.SAMPLER_2D=35678;gl.SAMPLER_CUBE=35680;gl.VERTEX_ATTRIB_ARRAY_ENABLED=34338;gl.VERTEX_ATTRIB_ARRAY_SIZE=34339;gl.VERTEX_ATTRIB_ARRAY_STRIDE=34340;gl.VERTEX_ATTRIB_ARRAY_TYPE=34341;gl.VERTEX_ATTRIB_ARRAY_NORMALIZED=34922;gl.VERTEX_ATTRIB_ARRAY_POINTER=34373;gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=34975;gl.COMPILE_STATUS=35713;gl.LOW_FLOAT=36336;gl.MEDIUM_FLOAT=36337;gl.HIGH_FLOAT=36338;gl.LOW_INT=36339;gl.MEDIUM_INT=36340;gl.HIGH_INT=36341;gl.FRAMEBUFFER=36160;gl.RENDERBUFFER=36161;gl.RGBA4=32854;gl.RGB5_A1=32855;gl.RGB565=36194;gl.DEPTH_COMPONENT16=33189;gl.STENCIL_INDEX=6401;gl.STENCIL_INDEX8=36168;gl.DEPTH_STENCIL=34041;gl.RENDERBUFFER_WIDTH=36162;gl.RENDERBUFFER_HEIGHT=36163;gl.RENDERBUFFER_INTERNAL_FORMAT=36164;gl.RENDERBUFFER_RED_SIZE=36176;gl.RENDERBUFFER_GREEN_SIZE=36177;gl.RENDERBUFFER_BLUE_SIZE=36178;gl.RENDERBUFFER_ALPHA_SIZE=36179;gl.RENDERBUFFER_DEPTH_SIZE=36180;gl.RENDERBUFFER_STENCIL_SIZE=36181;gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=36048;gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=36049;gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=36050;gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=36051;gl.COLOR_ATTACHMENT0=36064;gl.DEPTH_ATTACHMENT=36096;gl.STENCIL_ATTACHMENT=36128;gl.DEPTH_STENCIL_ATTACHMENT=33306;gl.NONE=0;gl.FRAMEBUFFER_COMPLETE=36053;gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=36054;gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=36055;gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=36057;gl.FRAMEBUFFER_UNSUPPORTED=36061;gl.FRAMEBUFFER_BINDING=36006;gl.RENDERBUFFER_BINDING=36007;gl.MAX_RENDERBUFFER_SIZE=34024;gl.INVALID_FRAMEBUFFER_OPERATION=1286;gl.UNPACK_FLIP_Y_WEBGL=37440;gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL=37441;gl.CONTEXT_LOST_WEBGL=37442;gl.UNPACK_COLORSPACE_CONVERSION_WEBGL=37443;gl.BROWSER_DEFAULT_WEBGL=37444;gl.update=function(){return commands.length>0};gl.refresh=function(obj){if(obj instanceof WebGLProgram&&obj["_glquery_id"]!=null){shaderLocations[obj._glquery_id]={}}};var containsAnyTags=function(t0,ts1){var ts0=t0.split(" ");for(var i=0;i<ts0.length;++i){if(ts0[i]==="")continue;for(var j=0;j<ts1.length;++j){if(ts0[i]===ts1[j])return true}}return false};var collectCommands=function(tags,commandsStack,commandsState){for(var i=0;i<tags.length;++i){var tagCommandsState=tagCommands[tags[i]];if(typeof tagCommandsState==="undefined")continue;commandsStack.push(tagCommandsState);var shaderState=tagCommandsState[command.shaderProgram];if(shaderState!=null){commandsState[command.shaderProgram]=shaderState}}},updateStateHashes=function(node,commandsStack,commandsState){var hashState=function(commandsState){return commandsState[command.shaderProgram].join("$")};assertInternal(node.hashes!=null&&typeof node.lastUpdate!=="undefined","Node properties are not properly initialized.");if(node.lastUpdate>0){node.lastUpdate=2;return}node.hashes={};if(typeof commandsStack==="undefined")commandsStack=[];if(typeof commandsState==="undefined")commandsState=[[]];for(var i=0;i<node.length;++i){if(typeof node[i]==="string"){var childCommandsStack=[];var childCommandsState=commandsState.slice();collectCommands(node[i].split(" "),childCommandsStack,childCommandsState);var stateHash=hashState(childCommandsState);var hashCommandsStack=node.hashes[stateHash];if(typeof hashCommandsStack==="undefined")hashCommandsStack=node.hashes[stateHash]=[];hashCommandsStack.push(commandsStack.concat(childCommandsStack))}else{for(var key in node[i]){var childCommandsStack=[];var childCommandsState=commandsState.slice();collectCommands(node[i].split(" "),childCommandsStack,childCommandsState);var childNode=node[i][key];if(node.lastUpdate===-1)childNode.lastUpdate=-1;childCommandsStack=commandsStack.concat(childCommandsStack);updateStateHashes(childNode,childCommandsStack,childCommandsState);for(var stateHash in childNode.hashes){var hashCommandsStack=node.hashes[stateHash];if(typeof hashCommandsStack==="undefined")node.hashes[stateHash]=childNode.hashes[stateHash];else node.hashes[stateHash]=hashCommandsStack.concat(childNode.hashes[stateHash])}}}}node.lastUpdate=1},updateSceneHashes=function(id){if(typeof scenes[id]==="undefined")return;var commandsStack=[];var commandsState=[[]];collectCommands(id.split(" "),commandsStack,commandsState);updateStateHashes(scenes[id],commandsStack,commandsState)},updateDirtyHashes=function(dirtyTags){var update=function(dirtyTags,key,node){if(containsAnyTags(key,dirtyTags)){node.lastUpdate=-1}else{for(var i=0;i<node.length;++i){var n=node[i];if(typeof n==="string"){if(node.lastUpdate<1)continue;if(containsAnyTags(n,dirtyTags))node.lastUpdate=0}else for(var key in n){var n=n[key];update(dirtyTags,key,n);if(n.lastUpdate<1){node.lastUpdate=0}}}}};for(var key in scenes){update(dirtyTags,key,scenes[key])}};var command={shaderProgram:0,geometry:1,vertexElem:2,vertexAttribBuffer:3,vertexAttrib1:4,vertexAttrib2:5,vertexAttrib3:6,vertexAttrib4:7,uniform:8,insert:9,remove:10},commandsSize={hashedState:1,unhashedState:2,unhashedStateDictionary:6,sceneGraph:2},commandDispatch=[function(context,selector,args){logDebug("dispatch command: shaderProgram",context,selector,args);if(args.length>0){var shaderProgram;if(args[0]instanceof WebGLProgram)shaderProgram=args[0];else if(args[0]instanceof WebGLShader){logError("Internal Error: shaderProgram(WebGLShader, ...) is not yet supported by glQuery.");return}shaderProgram._glquery_id=shaderProgramCounter;++shaderProgramCounter;if(shaderLocations[shaderProgram._glquery_id]==null){var activeAttributes=context.getProgramParameter(shaderProgram,context.ACTIVE_ATTRIBUTES),activeUniforms=context.getProgramParameter(shaderProgram,context.ACTIVE_UNIFORMS),locations=shaderLocations[shaderProgram._glquery_id]={attributes:{},uniforms:{}};for(var i=0;i<activeAttributes;++i){var attrib=context.getActiveAttrib(shaderProgram,i);locations.attributes[attrib.name]=context.getAttribLocation(shaderProgram,attrib.name)}for(var i=0;i<activeUniforms;++i){var uniform=context.getActiveUniform(shaderProgram,i);locations.uniforms[uniform.name]={location:context.getUniformLocation(shaderProgram,uniform.name),size:uniform.size,type:uniform.type}}}for(var i=0;i<selector.length;++i){var commandsStruct=tagCommands[selector[i]];commandsStruct[command.shaderProgram]=shaderProgram}}else{for(var i=0;i<selector.length;++i)if(typeof tagCommands[selector[i]]!=="undefined")delete tagCommands[selector[i]][command.shaderProgram]}},function(context,selector,args){logDebug("dispatch command: geometry",context,selector,args);if(args.length>0){for(var i=0;i<selector.length;++i){var commandsStruct=tagCommands[selector[i]];commandsStruct[command.geometry]=args}}else{for(var i=0;i<selector.length;++i)if(typeof tagCommands[selector[i]]!=="undefined")delete tagCommands[selector[i]][command.geometry]}},function(context,selector,args){logDebug("dispatch command: vertexElem",context,selector,args);if(args[0]==null){for(var i=0;i<selector.length;++i)if(typeof tagCommands[selector[i]]!=="undefined")delete tagCommands[selector[i]][command.vertexElem];return}switch(args.length){case 2:args.push(context.UNSIGNED_SHORT);case 3:args.push(0)}for(var i=0;i<selector.length;++i){var commandsStruct=typeof tagCommands[selector[i]]==="undefined"?tagCommands[selector[i]]={}:tagCommands[selector[i]];commandsStruct[command.vertexElem]=args}},function(context,selector,args){logDebug("dispatch command: vertexAttribBuffer",context,selector,args);if(args[0]==null){for(var i=0;i<selector.length;++i)if(typeof tagCommands[selector[i]]!=="undefined")delete tagCommands[selector[i]][command.vertexAttribBuffer];return}if(args[1]==null){return}for(var i=0;i<selector.length;++i){var commandsStruct=typeof tagCommands[selector[i]]==="undefined"?tagCommands[selector[i]]={}:tagCommands[selector[i]];commandsStruct[command.vertexAttribBuffer]=args}},function(context,selector,args){logDebug("dispatch command: vertexAttrib1",context,selector,args)},function(context,selector,args){logDebug("dispatch command: vertexAttrib2",context,selector,args)},function(context,selector,args){logDebug("dispatch command: vertexAttrib3",context,selector,args)},function(context,selector,args){logDebug("dispatch command: vertexAttrib4",context,selector,args)},function(context,selector,args){logDebug("dispatch command: uniform",context,selector,args);if(args[0]==null){for(var i=0;i<selector.length;++i)if(typeof tagCommands[selector[i]]!=="undefined")delete tagCommands[selector[i]][command.uniform];return}if(args[1]==null){return}for(var i=0;i<selector.length;++i){var commandsStruct=typeof tagCommands[selector[i]]==="undefined"?tagCommands[selector[i]]={}:tagCommands[selector[i]],uniformTable=commandsStruct[command.uniform],uniformArgs=args.slice(1);if(uniformTable==null)uniformTable=commandsStruct[command.uniform]={};uniformTable[args[0]]=uniformArgs.length==1||uniformArgs.length>0&&Array.isArray(uniformArgs[0])?uniformArgs:[uniformArgs]}},function(context,selector,args){logDebug("dispatch command: insert",context,selector,args)},function(context,selector,args){logDebug("dispatch command: remove",context,selector,args)}],commandEval=[function(context,renderState,args){logDebug("eval command: shaderProgram",context,renderState,args);context.useProgram(args);renderState.shaderProgram=args},function(context,renderState,args){logDebug("eval command: geometry",context,renderState,args);if(renderState.shaderProgram){if(renderState.useElements)context.drawElements(args[0],args[1]!=null?args[1]:renderState.numVertices,renderState.elementsType,renderState.elementsOffset+(args[2]!=null?args[2]:0));else context.drawArrays(args[0],args[2]!=null?args[2]:0,args[1]!=null?args[1]:renderState.numVertices)}},function(context,renderState,args){logDebug("eval command: vertexElem",context,renderState,args);context.bindBuffer(context.ELEMENT_ARRAY_BUFFER,args[0]);renderState.numVertices=args[1];renderState.elementsType=args[2];renderState.elementsOffset=args[3];renderState.useElements=true},function(context,renderState,args){logDebug("eval command: vertexAttribBuffer",context,renderState,args);var locations=renderState.shaderProgram!=null?shaderLocations[renderState.shaderProgram._glquery_id]:null;if(locations!=null){var attribLocation=typeof args[0]=="number"?args[0]:locations.attributes[args[0]];if(typeof attribLocation!=="undefined"&&attribLocation!==-1){context.bindBuffer(context.ARRAY_BUFFER,args[1]);context.enableVertexAttribArray(attribLocation);context.vertexAttribPointer(attribLocation,args[4],args[3],args[5],args[6],args[7]);if(!renderState.useElements)renderState.numVertices=Math.min(renderState.numVertices,args[2]/args[4])}}},function(context,renderState,args){logDebug("eval command: vertexAttrib1",context,renderState,args)},function(context,renderState,args){logDebug("eval command: vertexAttrib2",context,renderState,args)},function(context,renderState,args){logDebug("eval command: vertexAttrib3",context,renderState,args)},function(context,renderState,args){logDebug("eval command: vertexAttrib4",context,renderState,args)},function(){var uniformEval={};uniformEval[gl.FLOAT]=WebGLRenderingContext.prototype.uniform1f;uniformEval[gl.FLOAT_VEC2]=WebGLRenderingContext.prototype.uniform2fv;uniformEval[gl.FLOAT_VEC3]=WebGLRenderingContext.prototype.uniform3fv;uniformEval[gl.FLOAT_VEC4]=WebGLRenderingContext.prototype.uniform4fv;uniformEval[gl.INT]=WebGLRenderingContext.prototype.uniform1i;uniformEval[gl.INT_VEC2]=WebGLRenderingContext.prototype.uniform2iv;uniformEval[gl.INT_VEC3]=WebGLRenderingContext.prototype.uniform3iv;uniformEval[gl.INT_VEC4]=WebGLRenderingContext.prototype.uniform4iv;uniformEval[gl.BOOL]=WebGLRenderingContext.prototype.uniform1i;uniformEval[gl.BOOL_VEC2]=WebGLRenderingContext.prototype.uniform2iv;uniformEval[gl.BOOL_VEC3]=WebGLRenderingContext.prototype.uniform3iv;uniformEval[gl.BOOL_VEC4]=WebGLRenderingContext.prototype.uniform4iv;uniformEval[gl.FLOAT_MAT2]=function(location,value,transpose){this.uniformMatrix2fv(location,transpose!=null?transpose:false,value)};uniformEval[gl.FLOAT_MAT3]=function(location,value,transpose){this.uniformMatrix3fv(location,transpose!=null?transpose:false,value)};uniformEval[gl.FLOAT_MAT4]=function(location,value,transpose){this.uniformMatrix4fv(location,transpose!=null?transpose:false,value)};return function(context,renderState,args){logDebug("eval command: uniform",context,renderState,args);var locations=renderState.shaderProgram!=null?shaderLocations[renderState.shaderProgram._glquery_id]:null;if(locations!=null){for(var uniformName in args){var uniformInfo=locations.uniforms[uniformName];if(uniformInfo!=null){var uniformLocation=uniformInfo.location,uniformArgs=args[uniformName];if(uniformLocation!=null)uniformEval[uniformInfo.type].apply(context,[uniformLocation].concat(uniformArgs))}}}}}()];assert(commandDispatch.length===commandsSize.hashedState+commandsSize.unhashedState+commandsSize.unhashedStateDictionary+commandsSize.sceneGraph,"Internal Error: Total commands size does not add up to the correct number.");assert(commandEval.length===commandDispatch.length-commandsSize.sceneGraph,"Internal Error: Number of commands in commandEval is incorrect.");var dispatchCommands=function(context,commands){for(var i=0;i<commands.length;++i){var c=commands[i],key=c[0],selector=c[1],commandArgs=c[2];for(var j=0;j<selector.length;++j)dirtyTags.push(selector[j]);commandDispatch[key](context,selector,commandArgs)}commands.length=0},evalCommands=function(context,renderState,commandsStack){logDebug("evalCommands",context,renderState,commandsStack);var newRenderState=commandsStack[0].slice();newRenderState.numVertices=Number.POSITIVE_INFINITY;newRenderState.elementsOffset=0;newRenderState.elementsType=context.UNSIGNED_SHORT;newRenderState.useElements=false;for(var i=commandsStack.length-2;i>=0;--i){var commandsState=commandsStack[i];for(var j=0;j<commandEval.length;++j)if(newRenderState[j]==null)newRenderState[j]=commandsState[j]}for(var i=0;i<commandEval.length;++i)if(newRenderState[i]==null)newRenderState[i]=renderState[i];var shaderProgramCommand=newRenderState[command.shaderProgram];if(shaderProgramCommand!=renderState[command.shaderProgram]){commandEval[command.shaderProgram](context,newRenderState,shaderProgramCommand)}for(var i=command.vertexElem;i<=command.uniform;++i){var stateCommand=newRenderState[i];if(stateCommand!=null&&stateCommand!==renderState[i])commandEval[i](context,newRenderState,stateCommand)}var geometryCommand=newRenderState[command.geometry];if(geometryCommand!=null)commandEval[command.geometry](context,newRenderState,geometryCommand);renderState=newRenderState};gl.command=function(){if(!assertNumberOfArguments(arguments,1,"command"))return gl;if(!assert(command[arguments[0]]!=null,"Unknown command '"+command[arguments[0]]+"' used."))return gl;commands.push([command[arguments[0]],command[arguments[1]]!=null?command[arguments[1]]:null,Array.prototype.slice.call(arguments,2)]);return gl};gl.fn=gl.prototype={init:function(){this._selector=Array.prototype.slice.call(arguments);return this},render:function(context){if(!assertType(context,"object","render","context"))return this;dispatchCommands(context,commands);if(dirtyTags.length>0){updateDirtyHashes(dirtyTags);for(var key in scenes)updateSceneHashes(scenes[key]);dirtyTags.length=0}var renderSubTree=function(renderState,node){for(var key in node.hashes){var objectCommandStacks=node.hashes[key];for(var i=0;i<objectCommandStacks.length;++i)evalCommands(context,renderState,objectCommandStacks[i])}};var renderTraverse=function(renderState,node,selector){for(var i=0;i<node.length;++i){var n=node[i];if(typeof n!=="string"){for(var key in n)if(containsAnyTags(key,this._selector))renderSubTree(renderState,n[key]);else renderTraverse(renderState,n[key],this._selector)}}};for(var key in scenes){var renderState=new Array(commandEval.length);if(containsAnyTags(key,this._selector))renderSubTree(renderState,scenes[key]);else renderTraverse(renderState,scenes[key],this._selector)}return this},command:function(){if(!assertNumberOfArguments(arguments,1,"command"))return this;if(!assert(command[arguments[0]]!=null,"Unknown command '"+command[arguments[0]]+"' used."))return this;commands.push([command[arguments[0]],this._selector,Array.prototype.slice.call(arguments,1)]);return this},shaderProgram:function(){logDebug("shaderProgram");commands.push([command.shaderProgram,this._selector,Array.prototype.slice.call(arguments)]);return this},geometry:function(){logDebug("geometry");commands.push([command.geometry,this._selector,Array.prototype.slice.call(arguments)]);return this},points:function(){logDebug("points");commands.push([command.geometry,this._selector,[gl.POINTS].concat(Array.prototype.slice.call(arguments))]);return this},lines:function(){logDebug("lines");commands.push([command.geometry,this._selector,[gl.LINES].concat(Array.prototype.slice.call(arguments))]);return this},lineLoop:function(){logDebug("lineLoop");commands.push([command.geometry,this._selector,[gl.LINE_LOOP].concat(Array.prototype.slice.call(arguments))]);return this},lineStrip:function(){logDebug("lineStrip");commands.push([command.geometry,this._selector,[gl.LINE_STRIP].concat(Array.prototype.slice.call(arguments))]);return this},triangles:function(){logDebug("triangles");commands.push([command.geometry,this._selector,[gl.TRIANGLES].concat(Array.prototype.slice.call(arguments))]);return this},triangleStrip:function(){logDebug("triangleStrip");commands.push([command.geometry,this._selector,[gl.TRIANGLE_STRIP].concat(Array.prototype.slice.call(arguments))]);return this},triangleFan:function(){logDebug("triangleFan");commands.push([command.geometry,this._selector,[gl.TRIANGLE_FAN].concat(Array.prototype.slice.call(arguments))]);return this},vertexAttrib:function(){logDebug("vertexAttrib");commands.push([command.vertexAttribBuffer,this._selector,Array.prototype.slice.call(Array.prototype.slice.call(arguments))]);return this},vertexElem:function(){logDebug("vertexElem");commands.push([command.vertexElem,this._selector,Array.prototype.slice.call(Array.prototype.slice.call(arguments))]);return this},uniform:function(){logDebug("uniform");commands.push([command.uniform,this._selector,Array.prototype.slice.call(Array.prototype.slice.call(arguments))]);return this}};var apiDummy={};for(var key in gl.fn){apiDummy[key]=function(){return this}}var triggerContextEvents=function(callbacks,event){for(var i=0;i<callbacks.length;++i)if(callbacks[i][1])callbacks[i][0](event)};gl.canvas=function(htmlCanvas,contextAttr,width,height){var canvasId,canvasEl;logDebug("canvas");var dummy={start:function(){return this},clear:function(){return this},clearColor:function(){return this},clearDepth:function(){return this},clearStencil:function(){return this}};if(typeof htmlCanvas==="undefined"){canvasId="glqueryCanvas";document.write("<canvas id='"+canvasId+"' width='"+(width!=null?width:800)+"' height='"+(height!=null?height:800)+"'></canvas>");canvasEl=document.getElementById(canvasId)}else{if(!assert(typeof htmlCanvas==="string"||typeof htmlCanvas==="object"&&htmlCanvas.nodeName!=="CANVAS","In call to 'canvas', expected type 'string', 'undefined' or 'canvas element' for 'htmlCanvas'. Instead, got type '"+typeof htmlCanvas+"'."))return dummy;canvasId=typeof htmlCanvas==="string"?htmlCanvas:htmlCanvas.id;canvasEl=typeof htmlCanvas==="object"?htmlCanvas:document.getElementById(canvasId)}if(!assert(canvasEl!=null&&typeof canvasEl==="object"&&canvasEl.nodeName==="CANVAS","In call to 'canvas', could not initialize canvas element."))return dummy;if(canvasId!=null)logInfo("Initialized canvas: "+canvasId);else logInfo("Initialized canvas");var canvasCtx=canvasEl.getContext("experimental-webgl",contextAttr);if(!assert(canvasCtx!=null,"Could not get a 'experimental-webgl' context."))return dummy;canvasEl.addEventListener("webglcontextlost",function(event){var i;triggerContextEvents(eventCallbacks.contextlost,event);for(i=0;i<contexts.length;++i){var context=contexts[i];if(context.ctx.canvas!==canvasEl)continue;if(context.nextFrame!=null)window.cancelAnimationFrame(context.nextFrame);break}event.preventDefault()},false);canvasEl.addEventListener("webglcontextrestored",function(event){var i;triggerContextEvents(eventCallbacks.contextrestored,event);for(i=0;i<contexts.length;++i){var context=contexts[i];if(context.ctx.canvas!==canvasEl)continue;if(context.nextFrame==null&&context.paused===false)window.requestAnimationFrame(context.callback(),context.ctx.canvas);break}},false);canvasEl.addEventListener("webglcontextcreationerror",function(event){triggerContextEvents(eventCallbacks.contextcreationerror,event)},false);return function(){var self={ctx:canvasCtx,rootId:null,nextFrame:null,paused:true,clearMask:gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT,callback:function(){self=this;return function callback(){if(self.ctx.isContextLost())return;self.ctx.clear(self.clearMask);gl(self.rootId).render(self.ctx);self.nextFrame=window.requestAnimationFrame(callback,self.ctx.canvas)}}};contexts.push(self);return{start:function(rootId){logDebug("canvas.start");if(rootId!=null){if(!assertType(rootId,"string","canvas.start","rootId"))return this;self.rootId=rootId;self.nextFrame=window.requestAnimationFrame(self.callback(),self.ctx.canvas);self.paused=false}return this},pause:function(){logDebug("canvas.pause");window.cancelAnimationFrame(self.nextFrame);self.nextFrame=null;self.paused=true;return this},clear:function(mask){logDebug("canvas.clear");self.clearMask=mask;return this},clearColor:function(r,g,b,a){logDebug("canvas.clearColor");self.ctx.clearColor(r,g,b,a);return this},clearDepth:function(d){logDebug("canvas.clearDepth");self.ctx.clearDepth(d);return this},clearStencil:function(s){logDebug("canvas.clearStencil");self.ctx.clearStencil(s);return this}}}()};gl.scene=function(){logDebug("scene");var rootIds=[];for(var i=0;i<arguments.length;++i){var sceneDef=arguments[i];if(Array.isArray(sceneDef)){var id=normalizeNodes(generateId());scenes[id]=normalizeNodes(sceneDef);rootIds.push(id);continue}switch(typeof sceneDef){case"string":var id=normalizeNodes(sceneDef);scenes[id]=[];rootIds.push(id);continue;case"number":var id=normalizeNodes(String(sceneDef));scenes[id]=[];rootIds.push(id);continue;default:if(!assert(typeof sceneDef==="object","In call to 'scene', expected type 'string' ,'number' or 'object' for 'sceneDef'. Instead, got type '"+typeof sceneDef+"'."))continue;var normalizedScene=normalizeNodes(sceneDef);if(normalizedScene!=null){for(key in normalizedScene){rootIds.push(key);scenes[key]=normalizedScene[key]}}}}if(arguments.length===0){scenes={};return apiDummy}if(rootIds.length===0){logApiError("could not create scene from the given scene definition.");return apiDummy}for(var i=0;i<rootIds.length;++i){updateSceneHashes(rootIds[i])}return gl.fn.init.apply(gl.fn,rootIds)};gl.shader=function(id,code){logDebug("shader");if(typeof code==null){delete shaders[id]}else{if(!assertType(code,"string","shader","code"))return gl;shaders[id]=code}return gl};var registerContextEvent=function(eventName,callback,active){var i,active=active;if(typeof callback==="undefined"){eventCallbacks[eventName]=[];
return}assertType(callback,"function",eventName,"callback");typeof active!=="undefined"&&assertType(active,"boolean",eventName,"active");active=active===false?active:true;for(i=0;i<eventCallbacks[eventName].length;++i)if(eventCallbacks[eventName][i][0]===callback){eventCallbacks[eventName][i][1]=active;return}eventCallbacks[eventName].push([callback,active])};gl.contextlost=function(callback,active){registerContextEvent("contextlost",callback,active)};gl.contextrestored=function(callback,active){registerContextEvent("contextrestored",callback,active)};gl.contextcreationerror=function(callback){registerContextEvent("contextcreationerror",callback,active)};gl.worker=function(workerId,js){logError("(TODO) Workers are not yet implemented...")};if(typeof exports!=="undefined"&&exports!==null)exports.glQuery=gl;return gl}();